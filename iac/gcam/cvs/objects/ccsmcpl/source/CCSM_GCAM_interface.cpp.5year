/*! 
* \file CCSM_GCAM_interface.cpp
* \ingroup Objects
* \brief CCSM gcam driver source file.
* \author John Truesdale
*/


#include "util/base/include/auto_file.h"
#include "../../ccsmcpl/include/CCSM_GCAM_interface.h"
#include "containers/include/world.h"

  ofstream outFile;

  LoggerFactoryWrapper loggerFactoryWrapper;

  // Pointer for a scenario
  Scenario* scenario; // model scenario info
  
  std::auto_ptr<CcsmRunner> runner;

  vector<string> CCSM_GCAM_interface::regionName;
  vector<string> CCSM_GCAM_interface::landType;
  vector<string> CCSM_GCAM_interface::cropName;

/*! \brief Constructor
* \details This is the constructor for the CCSM_driver class.
*/


CCSM_GCAM_interface::CCSM_GCAM_interface(){
}

//! Destructor. 
CCSM_GCAM_interface::~CCSM_GCAM_interface(){
}

/*! \brief Initializer for GCAM.
* \details
*  Initialize gcam log files and read in configuration
*  and base model information.  Create and setup scenario
*/

void CCSM_GCAM_interface::initGCAM(void)
{

  // identify default file names for control input and logging controls
  string configurationArg = "configuration.xml";
  string loggerFactoryArg = "log_conf.xml";

  // Add OS dependent prefixes to the arguments.
  const string configurationFileName = configurationArg;
  const string loggerFileName = loggerFactoryArg;

  // Initialize the LoggerFactory
  bool success = XMLHelper<void>::parseXML( loggerFileName, &loggerFactoryWrapper );

  // Get the main log file.
  ILogger& mainLog = ILogger::getLogger( "main_log" );
  mainLog.setLevel( ILogger::WARNING );

  // print disclaimer
  mainLog << "This computer software was prepared by Battelle Memorial Institute," << endl;
  mainLog << "hereinafter the Contractor, under Contract No. DE-AC05-76RL0 1830 with" << endl;
  mainLog << "the Department of Energy (DOE). NEITHER THE GOVERNMENT NOR THE" << endl;
  mainLog << "CONTRACTOR MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR ASSUMES ANY" << endl;
  mainLog << "LIABILITY FOR THE USE OF THIS SOFTWARE. This notice including this" << endl;
  mainLog << "sentence must appear on any copies of this computer software." << endl << endl;
  
  // print export control notice
  mainLog << "User agrees that the Software will not be shipped, transferred or" << endl;
  mainLog << "exported into any country or used in any manner prohibited by the United" << endl;
  mainLog << "States Export Administration Act or any other applicable export laws," << endl;
  mainLog << "restrictions or regulations (collectively the 'Export Laws'). Export of" << endl;
  mainLog << "the Software may require some form of license or other authority from" << endl;
  mainLog << "the U.S. Government, and failure to obtain such export control license" << endl;
  mainLog << "may result in criminal liability under U.S. laws. In addition, if the" << endl;
  mainLog << "Software is identified as export controlled items under the Export Laws," << endl;
  mainLog << "User represents and warrants that User is not a citizen, or otherwise" << endl;
  mainLog << "located within, an embargoed nation (including without limitation Iran," << endl;
  mainLog << "Syria, Sudan, Cuba, and North Korea) and that User is not otherwise" << endl;
  mainLog << "prohibited under the Export Laws from receiving the Software. Note that" << endl;
  mainLog << "the United States Department of Commerce has determined that this" << endl;
  mainLog << "software has been assigned an export licensing code (ECCN) of EAR99." << endl;
  mainLog << "This ECCN applies to both the ObjECTS modeling framework and the ObjECTS" << endl;
  mainLog << "Model Interface. All rights to use the Software are granted on condition" << endl;
  mainLog << "that such rights are forfeited if User fails to comply with the terms of" << endl;
  mainLog << "this Agreement. User agrees to indemnify, defend and hold harmless" << endl;
  mainLog << "BATTELLE, its officers, agents and employees from all liability" << endl;
  mainLog << "involving the violation of such Export Laws, either directly or" << endl;
  mainLog << "indirectly, by User." << endl << endl;
  
  mainLog << "Running GCAM model code base version " << __ObjECTS_VER__ << " revision "
	  << __REVISION_NUMBER__ << endl << endl;
  
  // Parse configuration file.
  mainLog.setLevel( ILogger::NOTICE );
  mainLog << "Parsing input files..." << endl;
  Configuration* conf = Configuration::getInstance();
  success = XMLHelper<void>::parseXML( configurationFileName, conf );
  // Check if parsing succeeded. Non-zero return codes from main indicate


  // Initialize the timer.  Create an object of the Timer class.
  Timer timer;
  timer.start();

  // ******  packup gcamo  hard coded regions and landtypes for now
  regionName.push_back("USA");
  regionName.push_back("Canada");
  regionName.push_back("Western Europe");
  regionName.push_back("Japan");
  regionName.push_back("Australia_NZ");
  regionName.push_back("Former Soviet Union");
  regionName.push_back("China");
  regionName.push_back("Middle East");
  regionName.push_back("Africa");
  regionName.push_back("Latin America");
  regionName.push_back("Southeast Asia");
  regionName.push_back("Eastern Europe");
  regionName.push_back("Korea");
  regionName.push_back("India");
    
    
  landType.push_back("Build-up");
  landType.push_back("Cropland");
  landType.push_back("Pasture");
  landType.push_back("ForestHarvested");
  landType.push_back("Forest");
  landType.push_back("Other Land");
    
  cropName.push_back("biomass");
  cropName.push_back("Corn");
  cropName.push_back("eucalyptus");
  cropName.push_back("FiberCrop");
  cropName.push_back("FodderGrass");
  cropName.push_back("FodderHerb");
  cropName.push_back("Forest");
  cropName.push_back("Grassland");
  cropName.push_back("Jatropha");
  cropName.push_back("miscanthus");
  cropName.push_back("MiscCrop");
  cropName.push_back("OilCrop");
  cropName.push_back("OtherArableLand");
  cropName.push_back("OtherGrain");
  cropName.push_back("PalmFruit");
  cropName.push_back("Pasture");
  cropName.push_back("Rice");
  cropName.push_back("RockIceDesert");
  cropName.push_back("Root_Tuber");
  cropName.push_back("Shrubland");
  cropName.push_back("SugarCrop");
  cropName.push_back("Tundra");
  cropName.push_back("UnmanagedForest");
  cropName.push_back("UnmanagedPasture");
  cropName.push_back("UrbanLand");
  cropName.push_back("Wheat");
  cropName.push_back("willow");

  // Create an empty exclusion list so that any type of IScenarioRunner can be
  // created.

  //  create the scenario runner
  runner = auto_ptr<CcsmRunner>( new CcsmRunner );

  // Setup the scenario.
  success = runner->setupScenarios( timer );

  const Modeltime* modeltime = runner->getInternalScenario()->getModeltime();

  gcamStartYear = modeltime->getStartYear();
  gcamEndYear = modeltime->getEndYear();

  timer.stop();

}
void CCSM_GCAM_interface::runGCAM(int *yyyymmdd, int *tod, double *gcami, int *gcami_fdim1_nflds, int *gcami_fdim2_datasize, double *gcamo,int *gcamo_fdim1_nflds,int *gcamo_fdim2_datasize,int *yr1,int *yr2)
{

  bool success = false;
  ILogger& mainLog = ILogger::getLogger( "main_log" );
  mainLog.setLevel( ILogger::NOTICE );
  
  if (*yyyymmdd/10000 < gcamStartYear ) {
    mainLog << "returning from runGCAM: current date: " <<*yyyymmdd<<" is before GCAM starting date: " << gcamStartYear << endl;
    return;
  }
  if (*yyyymmdd/10000 > gcamEndYear ) {
    mainLog << "returning from runGCAM: current date: " <<*yyyymmdd<<" is after GCAM ending date: " << gcamEndYear << endl;
    return;
  }
  
  const Modeltime* modeltime = runner->getInternalScenario()->getModeltime();
  int curryear = *yyyymmdd/10000;
  int finalCalibrationYear=modeltime->getper_to_yr(modeltime->getFinalCalibrationPeriod());
  int period = modeltime->getyr_to_per( curryear );
  int modelyear= modeltime->getper_to_yr(period);

  mainLog << "curryear is " << curryear << endl;
  mainLog << "period is " << period << endl;
  mainLog << "modelyear is " << modelyear << endl;
  mainLog << "finalCalibrationYear is " << finalCalibrationYear << endl;

  // if we are past final calibration year then push carbon densities for this year
  if (curryear > finalCalibrationYear) {
    mainLog << "GCAM is setting Carbon data for year" << curryear << endl;
    
    //unpack gcami and set above and below ground carbon fields
    SetCarbonDensity& setDensities = runner->getInternalScenario()->getWorld()->getAdjustCarbonDensityVisitor();

    int gcami_nflds=2;
    int nreg = 14;
    int naez = 18;
    int ncrops = 27;
    int i=-1*gcami_nflds;
    for (int r=0;r<nreg;r++){
      for (int aez=1;aez<=naez;aez++){
	for (int ic=0;ic<ncrops;ic++){
	  i+=gcami_nflds;
	  if (gcami[i] > 0.) {
	    setDensities.setCarbonDensityToPush( regionName[r], aez, cropName[ic], gcami[i], gcami[i+1],  curryear );
	    mainLog << "Setting above/below ground carbon for region "<<r<<" aez "<<aez<<" crop "<<ic<<" year "<<curryear<<"agc="<<gcami[i]<<"bgc="<<gcami[i+1] << endl;
	  }
	}
      }
    }

    // push set carbon densities into the model
    runner->getInternalScenario()->accept( &setDensities, period );

    if(!modeltime->isModelYear( curryear)) {
      mainLog << "runGCAM: next period to calculate starts on " << modelyear << endl;
      mainLog << "runGCAM: returning after setting carbon densities for " << curryear << endl;
      
      // for now just write a restart dataset every step
      runner->writeRestart( period, curryear );
    }

  }
  
  if(!modeltime->isModelYear( curryear)) return; 
  
  
  // TODO: is this necessary, it will be the same as currYear
  mainLog << "Running GCAM for year" << modelyear << endl;
  mainLog << "calculating period=" << period << endl;
  int prevyear=  period==0?gcamStartYear:modeltime->getper_to_yr(period-1);
  
  Timer timer;
  mainLog.precision(20);

  // Initialize the timer.  Create an object of the Timer class.
  timer.start();
  
  success = runner->runScenarios( period, true, timer );

  // for now just write a restart dataset every step
  runner->writeRestart( period, curryear );

  //     // ****** This is an example of how to query GCAM data for GLM ******
  //     // A Period value of -1 indicates gather data for all model periods.

  mainLog << "calling runner accept with period: " << period << endl;
  GetGLMData glmData;
  runner->getInternalScenario()->accept(&glmData, period );
      
  // Region and land categories are GLM categories, the years are GCAM years
  // for example 1990 to 2095 in 15 curryear time steps.
  int aez=7 ;
  mainLog << "Year: " << modelyear << endl;
  mainLog << "USA Cropland: " << glmData.getLandCover( "USA", aez, "Cropland", modelyear ) << endl;
  mainLog << "USA Forest: " << glmData.getLandCover( "USA", aez, "Forest", modelyear ) << endl;
  mainLog << "USA ForestHarvested: " << glmData.getLandCover( "USA", aez, "ForestHarvested", modelyear ) << endl;
  mainLog << "USA Grassland: " << glmData.getLandCover( "USA", aez, "Grassland", modelyear ) << endl;
  mainLog << "USA Pasture: " << glmData.getLandCover( "USA", aez, "Pasture", modelyear ) << endl;
  mainLog << "USA Build-up: " << glmData.getLandCover( "USA", aez, "Build-up", modelyear ) << endl;
  mainLog << "USA Other Land: " << glmData.getLandCover( "USA", aez, "Other Land", modelyear ) << endl;
  mainLog << "USA Forest production in tC: " << glmData.getProductionInCarbon( "USA", aez, "Forest", modelyear ) << endl;
  pair<double, double> carbonDensity = glmData.getCarbonDensity( "USA", aez, "Corn", modelyear );
  mainLog << "USA Corn carbon densities: " << carbonDensity.first <<  ", " << carbonDensity.second << endl;


  double tmp=0.;
  int in = -1;
  int gcamoyear[2];
  for (int yr = 0;yr<2;yr++) {
    GetGLMData glmData;
    gcamoyear[yr] = yr==0?prevyear:modelyear;
    period = modeltime->getyr_to_per( gcamoyear[yr] );
    runner->getInternalScenario()->accept(&glmData, period );
    mainLog << "gcamoyear[" << yr <<"]=" << gcamoyear[yr] << endl;
    mainLog << "gcamoyear period" << period << endl;
    for (int i = 0;i<14;i++) {
      for (aez = 1;aez<19;aez++) {
	for (int n = 0;n<*gcamo_fdim1_nflds;n++) {
	  in++;
	  prevyear=  period==0?gcamStartYear:modeltime->getper_to_yr(period-1);
	  if (landType[n] != "ForestHarvested") { 
	    tmp =  glmData.getLandCover( regionName[i], aez, landType[n], gcamoyear[yr] );	
	    gcamo[in] = tmp<0.?0.:tmp;
	    mainLog << "packing " << regionName[i] << ":" << aez << ":" << landType[n] <<" gcamo[" << in << "]=" << glmData.getLandCover( regionName[i], aez, landType[n], gcamoyear[yr] ) << endl;
	    
	  }else{
	    tmp = glmData.getProductionInCarbon( regionName[i], aez, "Forest", gcamoyear[yr] );	 
	    gcamo[in] =   tmp<0.?0.:tmp;
	    mainLog << "packing " << regionName[i] <<":" << aez << ":" << landType[n] <<" gcamo[" << in << "]=" << glmData.getProductionInCarbon( regionName[i],aez, "Forest", gcamoyear[yr] ) << endl;
	  }
	}
      }
    }
  }
  *yr1=gcamoyear[0];
  *yr2=gcamoyear[1];
  timer.stop();
      
}
void CCSM_GCAM_interface::finalizeGCAM()
{
  Timer timer;
  // Initialize the timer.  Create an object of the Timer class.
  timer.start();
  ILogger& mainLog = ILogger::getLogger( "main_log" );
  mainLog.setLevel( ILogger::NOTICE );
  mainLog << "calling finalize" << endl;
  runner->printOutput(timer);
  timer.stop();
}
